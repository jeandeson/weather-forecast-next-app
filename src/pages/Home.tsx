import {
  TiWeatherCloudy,
  TiWeatherDownpour,
  TiWeatherSunny,
} from "react-icons/ti";
import {
  Container,
  Content,
  Card,
  WeatherDetails,
  WeatherDetailsLeft,
  WeatherDetailsRight,
  DaysOfWeeks,
  Footer,
  DayWrapper,
  CardHead,
} from "../styles/Home";
import { useContext, useEffect, useState } from "react";
import Head from "next/head";
import type { NextPage } from "next";
import { GetServerSideProps } from "next";
import type { current, Forecast } from "../types/Forecast";
import { HiOutlineDotsHorizontal } from "react-icons/hi";
import ThemeContext from "../contexts/theme/themeContext";

interface IHomeProps {
  forecastData: Forecast[];
  current: current;
}

const weekday = [
  "Sunday",
  "Monday",
  "Tuesday",
  "Wednesday",
  "Thursday",
  "Friday",
  "Saturday",
];

const Home: NextPage<IHomeProps> = ({ forecastData, current }: IHomeProps) => {
  const [weather, setWeather] = useState<Forecast[]>(forecastData);
  const [weatherPreview, setWeatherPreview] = useState<Forecast[]>([]);
  const [togglePreview, setTogglePreview] = useState(false);

  useEffect(() => {
    const aux: Forecast[] = [];
    for (let i = 0; i < 5; i++) {
      const element = forecastData[i];
      aux.push(element);
    }
    setWeatherPreview(aux);
  }, []);

  function getWeatherIcon(main: string) {
    if (main === "Rain") {
      return <TiWeatherDownpour />;
    } else if (main === "Clouds") {
      return <TiWeatherCloudy />;
    } else {
      return <TiWeatherSunny />;
    }
  }

  return (
    <Container>
      <Head>
        <meta name="description" content="Generated by create next app" />
        <title>Weather Forecast</title>
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Content>
        <Card>
          <CardHead>
            <div>
              <h3>WEATHER</h3>
              <button>
                <HiOutlineDotsHorizontal />
              </button>
            </div>
            <h1>{current.location}</h1>
          </CardHead>
          <WeatherDetails>
            <WeatherDetailsLeft>
              {weather[0].temperatureC}
              {"°C"}
            </WeatherDetailsLeft>
            <WeatherDetailsRight>
              <span>{current.weather[0].description}</span>
              {getWeatherIcon(current.weather[0].main)}
            </WeatherDetailsRight>
          </WeatherDetails>
          <DaysOfWeeks>
            {togglePreview === false
              ? weatherPreview.map((item, index) => (
                  <DayWrapper key={index}>
                    <div>
                      {index === 0
                        ? "Today"
                        : weekday[new Date(item.date).getDay()]}
                    </div>
                    <div>
                      <span>
                        {item.temperatureF}
                        {"°F"}
                      </span>
                    </div>
                    <div>
                      <span>{getWeatherIcon(item.main)}</span>
                    </div>
                    <div>
                      <span>
                        {item.temperatureC}
                        {"°C"}
                      </span>
                    </div>
                  </DayWrapper>
                ))
              : weather.map((item, index) => (
                  <DayWrapper key={index}>
                    <div>
                      <span>
                        {index === 0
                          ? "Today"
                          : weekday[new Date(item.date).getDay()]}
                      </span>
                    </div>
                    <div>
                      <span>
                        {item.temperatureF}
                        {"°F"}
                      </span>
                    </div>
                    <div>
                      <span>{getWeatherIcon(item.main)}</span>
                    </div>
                    <div>
                      <span>
                        {item.temperatureC}
                        {"°C"}
                      </span>
                    </div>
                  </DayWrapper>
                ))}
          </DaysOfWeeks>
          <Footer>
            <button
              onClick={() => {
                setTogglePreview(!togglePreview);
              }}
            >
              {!togglePreview ? (
                <span>{"See Full Forecast"}</span>
              ) : (
                <span>{"Back To Preview"}</span>
              )}
            </button>
          </Footer>
        </Card>
      </Content>
    </Container>
  );
};

export default Home;
